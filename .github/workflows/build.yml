name: Build
# Run workflow when manually triggered, part of a pull request or on a tag push (release)
on:
  pull_request:
  push:

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - name: "intel"
            os: "macos-latest"
            cmake_preset: "intel"
          - name: "arm64"
            os: "macos-latest"
            cmake_preset: "arm64"
    steps:
      - name: 'Checkout repo recursively.'
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: 'Install ninja-build tool.'
        uses: seanmiddleditch/gha-setup-ninja@v3

      - name: 'Set install prefix.'
        id: cmake_install_prefix
        env:
          RUNNER_WORKSPACE: ${{ runner.workspace }}
        shell: cmake -P {0}
        run: |
          string(REPLACE " " "_" NAME_NO_SPACES "${{ matrix.config.name }}")
          file(TO_CMAKE_PATH "$ENV{RUNNER_WORKSPACE}" RUNNER_WORKSPACE)
          set(INSTALL_DIR "${NAME_NO_SPACES}")
          file(TO_NATIVE_PATH "${RUNNER_WORKSPACE}/${INSTALL_DIR}" PREFIX)
          message("::set-output name=install_prefix::${PREFIX}")
          message("::set-output name=install_dir::${INSTALL_DIR}")

      - name: 'Configure'
        run: cmake --preset ${{ matrix.config.cmake_preset }} -DCMAKE_INSTALL_PREFIX="${{ steps.cmake_install_prefix.outputs.install_prefix }}"

      - name: 'Build'
        run: cmake --build --preset ${{ matrix.config.cmake_preset }}

      - name: 'Install to output dir.'
        run: |
          cmake -E make_directory "${{ steps.cmake_install_prefix.outputs.install_prefix }}"
          cmake --build --preset ${{ matrix.config.cmake_preset }} --target install

      - name: 'Upload output dir as build artifact.'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.cmake_install_prefix.outputs.install_dir }}
          path: ${{ steps.cmake_install_prefix.outputs.install_prefix }}

  ub:
    name: universal_binary
    runs-on: macos-latest
    needs: build

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: 'intel'
          path: "${{ runner.workspace }}/intel"

      - uses: actions/download-artifact@v2
        with:
          name: 'arm64'
          path: "${{ runner.workspace }}/arm64"

      - name: 'build ub'
        run: |
          cp -r intel ub
          rm ub/bin/hello
          lipo -create intel/bin/hello arm64/bin/hello -output ub/bin/hello
          lipo ub/hello -detailed-info
        working-directory: ${{ runner.workspace }}

      - uses: actions/upload-artifact@v2
        with:
          name: 'ub'
          path: '${{ runner.workspace }}/ub'

